// First Prisma Schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Account Model
model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], name: "userId")
}

// Session Model
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "userId")
}

// User Model
model User {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  name              String?
  username          String?   
  bio               String?
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  coverImage        String?
  profileImage      String?
  hashedPassword    String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  followingIds      String[]   @db.ObjectId
  hasNotifications   Boolean?
  credits           Int       @default(10) // Added from the first User model
  games             Game[]
  accounts          Account[]
  sessions          Session[]
  posts             Post[]
  comments          Comment[]
  notifications     Notifications[]
  activities        Activity[] 
}


// Course Model
model Course {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  image String
  units Unit[]

  @@index([name], name: "course_name")
}

// Unit Model
model Unit {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  courseId String

  name     String
  course   Course    @relation(fields: [courseId], references: [id])
  chapters Chapter[]

  @@index([courseId], name: "unit_courseId")
}

// Chapter Model
model Chapter {
  id                 String      @id @default(auto()) @map("_id") @db.ObjectId
  unitId             String
  name               String
  youtubeSearchQuery String
  videoId            String?
  summary            String?
  unit               Unit        @relation(fields: [unitId], references: [id])
  questionsC         QuestionC[] // Added to create the relation with QuestionC

  @@index([unitId], name: "chapter_unitId")
}

// Question Model
model Question {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  question          String
  answer            String
  gameId            String
  options           Json? // for mcq questions
  percentageCorrect Float? // for open_ended questions
  isCorrect         Boolean? // for mcq questions
  questionType      GameType
  userAnswer        String?
  game              Game     @relation(fields: [gameId], references: [id])

  @@index([gameId])
}

// GameType Enum
enum GameType {
  mcq
  open_ended
}

// Game Model
model Game {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  questions   Question[]
  timeStarted DateTime
  topic       String
  timeEnded   DateTime?
  gameType    GameType
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// TopicCount Model
model topic_count {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  topic String @unique
  count Int
}

// UserSubscription Model
model UserSubscription {
  id                     String    @id @default(auto()) @map("_id") @db.ObjectId
  userId                 String    @unique
  stripeCustomerId       String    @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

// Updated QuestionC Model
model QuestionC {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  chapterId String

  question String
  answer   String
  options  String
  chapter  Chapter  @relation(fields: [chapterId], references: [id])

  @@index([chapterId], name: "chapterId")
}

// ------------------------------------------------------------------------------------
// Second Prisma Schema

// Post Model
model Post {
  id String   @id @default(auto()) @map("_id") @db.ObjectId
  body String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String @db.ObjectId
  likedIds String[] @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete:Cascade)
  comments Comment[]
}

// Comment Model
model Comment {
  id String   @id @default(auto()) @map("_id") @db.ObjectId
  body String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String @db.ObjectId
  postId String @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete:Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

// Notifications Model
model Notifications {
  id String   @id @default(auto()) @map("_id") @db.ObjectId
  body String
  createdAt DateTime @default(now())
  userId String @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete:Cascade)
}

model Activity {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  name        String
  description String?
  colorCode   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activityLogs ActivityLog[]
}

model ActivityLog {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  activityId  String   @db.ObjectId
  date        DateTime @default(now())
  count       Int      @default(1)

  activity    Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
}
